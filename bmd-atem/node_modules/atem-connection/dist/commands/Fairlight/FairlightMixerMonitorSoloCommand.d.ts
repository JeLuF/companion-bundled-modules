/// <reference types="node" />
import { FairlightAudioMonitorSolo } from '../../state/fairlight';
import { AtemState } from '../../state';
import { DeserializedCommand, WritableCommand } from '../CommandBase';
import { OmitReadonly } from '../../lib/types';
export declare class FairlightMixerMonitorSoloCommand extends WritableCommand<OmitReadonly<FairlightAudioMonitorSolo>> {
    static MaskFlags: {
        solo: number;
        index: number;
        source: number;
    };
    static readonly rawName = "CFMS";
    serialize(): Buffer;
}
export declare class FairlightMixerMonitorSoloUpdateCommand extends DeserializedCommand<FairlightAudioMonitorSolo> {
    static readonly rawName = "FAMS";
    static deserialize(rawCommand: Buffer): FairlightMixerMonitorSoloUpdateCommand;
    applyToState(state: AtemState): string;
}
//# sourceMappingURL=FairlightMixerMonitorSoloCommand.d.ts.map